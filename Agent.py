import os
import pandas as pd
from datetime import datetime
from openai import AzureOpenAI
import re
from io import StringIO
import random

# --- CONFIGURACI√ìN AZURE ---
endpoint = "https://openai-2025pp.openai.azure.com/"
deployment = "o3-mini"
subscription_key = "AZpZ6chFFbcaxVd2dNiCkP4q9gkzKbsVCg1hvZTr3orULhamJWumJQQJ99BDACHYHv6XJ3w3AAABACOGbwAg"
api_version = "2024-12-01-preview"

client = AzureOpenAI(
    api_version=api_version,
    azure_endpoint=endpoint,
    api_key=subscription_key,
)

# --- FIRMAS BENITO ---
firmas_benito = [
    "Quedo atento a cualquier ajuste que quieras hacer. ‚Äî Benito üë®‚Äçüíº",
    "Listo para lo que necesites. Seguimos avanzando. ‚Äî Benito üë®‚Äçüíº",
    "Aqu√≠ tienes el an√°lisis claro y al punto. Me cuentas si algo m√°s se requiere. ‚Äî Benito üë®‚Äçüíº",
    "Gracias por confiar en m√≠ para este an√°lisis. Seguimos en equipo. ‚Äî Benito üë®‚Äçüíº"
]

# --- FUNCIONES ---
def cargar_datos(path_excel):
    df = pd.read_excel(path_excel)
    df.columns = df.columns.str.strip().str.replace(r'\s+', ' ', regex=True)
    df['Fecha de t√©rmino planeada'] = pd.to_datetime(df['Fecha de t√©rmino planeada'], errors='coerce')
    df = df.dropna(subset=['Fecha de t√©rmino planeada', 'Entidad propietaria'])
    return df

def preparar_contexto(df):
    df_ctx = df[['Nombre Local', 'Entidad propietaria', 'Fecha de t√©rmino planeada', 'Estatus Actual del Flujo de Trabajo']].copy()
    df_ctx.rename(columns={
        'Nombre Local': 'Nombre Acci√≥n',
        'Entidad propietaria': 'Due√±o',
        'Fecha de t√©rmino planeada': 'Fecha Compromiso',
        'Estatus Actual del Flujo de Trabajo': 'Estado'
    }, inplace=True)
    df_ctx['Fecha Compromiso'] = df_ctx['Fecha Compromiso'].dt.strftime('%Y-%m-%d')
    return df_ctx.to_string(index=False)

def analizar_con_ia(contexto_str):
    hoy = datetime.today().strftime('%Y-%m-%d')
    firma = random.choice(firmas_benito)
    messages = [
        {
            "role": "system",
            "content": (
                "Hola, soy Benito. Formo parte del equipo de Estrategia y Gesti√≥n de Riesgos en ISAGEN. "
                "Me encargo de revisar, cada trimestre, las acciones de mejora para asegurar que estemos avanzando seg√∫n lo planeado. "
                "Analizo los compromisos vigentes, identifico riesgos por vencimientos y mantengo todo bien organizado para que la toma de decisiones sea clara y oportuna. "
                "Puedes contar conmigo como un compa√±ero atento, proactivo y siempre listo para aportar al equipo."
            )
        },
        {
            "role": "user",
            "content": f"""Aqu√≠ est√°n las acciones:

{contexto_str}

Hoy es {hoy}.
Identifica:
1. Acciones VENCIDAS (fecha compromiso < hoy)
2. Acciones PR√ìXIMAS A VENCER (fecha compromiso entre el Q de hoy y el proximo Q que comprende cada 3 meses. 
   Enc√°rgate de analizar bien en cu√°l Q estamos y cu√°l Q viene teniendo como referencia el hoy. Un "Q" es un cuatrimestre:
   Q1 = Enero, Febrero, Marzo;
   Q2 = Abril, Mayo, Junio;
   Q3 = Julio, Agosto, Septiembre;
   Q4 = Octubre, Noviembre, Diciembre.
3. Solo necesito los que tienen Estado: En progreso y lo entregues ordenado ascendente por Q
4. Agrega una nueva columna que me diga a cu√°l "Q" pertenece cada acci√≥n.
5. Para la presentaci√≥n de la informaci√≥n, QUITA la palabra "SIMULACRO" de cada acci√≥n y deja el resto del nombre.
6. Garantiza que la primera letra de cada acci√≥n sea en may√∫scula
7. Analiza las fechas, lo relevante es del a√±o en curso. Si detectas de a√±os anteriores haz una alerta y tambien las resaltas

Para cada grupo, muestra: Nombre Acci√≥n, Due√±o, Fecha Compromiso, Estado y Q.
Pres√©ntalo como dos tablas Markdown (una para VENCIDAS y otra para PR√ìXIMAS).
Al final, agrega una breve firma amable como: {firma}
"""
        }
    ]

    response = client.chat.completions.create(
        model=deployment,
        messages=messages,
        max_completion_tokens=100000
    )
    return response.choices[0].message.content

def extraer_tablas(respuesta):
    print("\nüîç Extrayendo tablas de la respuesta del modelo...")

    bloques = re.findall(r'((?:\|.+\|\n)+)', respuesta)
    print(f"‚úÖ Se encontraron {len(bloques)} posibles tablas.")

    dfs = []

    for i, bloque in enumerate(bloques):
        try:
            lineas = bloque.strip().split("\n")
            if len(lineas) < 2:
                continue

            tabla_sin_guiones = "\n".join([lineas[0]] + [l for l in lineas[1:] if not re.match(r'^\|[-\s|]+$', l)])
            df = pd.read_csv(StringIO(tabla_sin_guiones), sep="|", engine="python", skipinitialspace=True)
            df = df.dropna(axis=1, how='all')
            df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
            df.columns = df.columns.str.strip()
            dfs.append(df)
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo procesar la tabla {i+1}. Error: {e}")

    return dfs

def guardar_excel(vencidas, proximas, salida="acciones_analizadas.xlsx"):
    with pd.ExcelWriter(salida, engine='openpyxl') as writer:
        vencidas.to_excel(writer, index=False, sheet_name='Vencidas')
        proximas.to_excel(writer, index=False, sheet_name='Proximas')
    print(f"\n‚úÖ Archivo generado: {salida}")

# --- EJECUCI√ìN ---
if __name__ == "__main__":
    archivo = "Simulacros.xlsx"

    df = cargar_datos(archivo)
    contexto = preparar_contexto(df)
    respuesta = analizar_con_ia(contexto)

    print("\n--- AN√ÅLISIS DE BENITO ---\n")
    print(respuesta)

    tablas = extraer_tablas(respuesta)

    if len(tablas) >= 2:
        vencidas_df, proximas_df = tablas[:2]
        guardar_excel(vencidas_df, proximas_df)
    else:
        print("\n‚ö†Ô∏è No se encontraron al menos dos tablas v√°lidas en la respuesta.")
        for i, df in enumerate(tablas):
            print(f"\nTabla {i+1} (mostrando las primeras filas):")
            print(df.head())
